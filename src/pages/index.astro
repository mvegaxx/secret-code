---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <style>
    .grid-container {
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      grid-gap: 10px;
      padding: 10px;
    }

    .grid-item {
      background-color: #ddd;
      padding: 20px;
      text-align: center;
      font-size: 20px;
    }
    .box {
      width: 50px;
      height: 50px;
      display: inline-block;
      margin: 5px;
    }
    .grid {
      display: grid;
      grid-template-columns: repeat(5, 50px);
      grid-template-rows: repeat(5, 50px);
      gap: 2px;
    }

    .cell {
      width: 50px;
      height: 50px;
      background-color: lightgray;
      border: 1px solid black;
    }
  </style>
  <body>
    <div class="grid" id="grid-container"></div>
    <button id="prevButton">Patrón Anterior</button>
    <button id="nextButton">Siguiente Patrón</button>
  </body>
  <script>
    const gridContainer = document.getElementById("grid-container");

    // Crear la cuadrícula
    for (let i = 0; i < 5; i++) {
      for (let j = 0; j < 5; j++) {
        const cell = document.createElement("div");
        cell.classList.add("cell");
        gridContainer?.appendChild(cell);
      }
    }

    // Colorear celdas aleatorias
    const cells = document.querySelectorAll(".cell") as NodeListOf<HTMLElement>;
    const blueCount = 8;
    const redCount = 9;
    const greenCount = 1;
    let colored = 0;

    function guardarCeldasColoreadasEnLocalStorage() {
      const coloredCells = obtenerCeldasColoreadas();

      // Obtener el array existente de celdas coloreadas del localStorage
      let storedColoredCells =
        JSON.parse(localStorage.getItem("storedColoredCells")) || [];

      // Agregar el nuevo objeto de celdas coloreadas al array
      storedColoredCells.push(coloredCells);

      // Guardar el array actualizado en localStorage
      localStorage.setItem(
        "storedColoredCells",
        JSON.stringify(storedColoredCells)
      );
    }

    function colorearCeldasConPatron(patron) {
      const cells = document.querySelectorAll(
        ".cell"
      ) as NodeListOf<HTMLElement>;

      // Reiniciar estilos
      cells.forEach((cell) => {
        cell.style.backgroundColor = "lightgray";
        cell.dataset.colored = "false";
      });

      // Colorear celdas según el patrón proporcionado
      Object.keys(patron).forEach((color) => {
        patron[color].forEach((position) => {
          const index = (position.row - 1) * 5 + (position.col - 1);
          const cell = cells[index];

          cell.style.backgroundColor = color;
          cell.dataset.colored = "true";
        });
      });
    }

    function colorearConPatronAleatorio() {
      const coloredCells = {
        blue: [],
        red: [],
        green: [],
      };
      while (colored < blueCount + redCount + greenCount) {
        const randomIndex = Math.floor(Math.random() * cells.length);
        const cell = cells[randomIndex];
        console.log(coloredCells);
        if (colored < blueCount) {
          coloredCells.green.push(randomIndex);
        } else if (colored < blueCount + redCount) {
          coloredCells.green.push(randomIndex);
        } else if (colored < blueCount + redCount + greenCount) {
          coloredCells.green.push(randomIndex);
        }
        colored++;
      }

      return coloredCells;
    }

    function obtenerCeldasColoreadas() {
      const cells = document.querySelectorAll(".cell");
      const coloredCells = {
        blue: [],
        red: [],
        green: [],
      };

      // console.log(cell);
      cells.forEach(function (cell, index) {
        const color = cell.style.backgroundColor;
        const position = {
          row: Math.floor(index / 5) + 1,
          col: (index % 5) + 1,
        };

        if (color === "blue") {
          coloredCells.blue.push(position);
        } else if (color === "red") {
          coloredCells.red.push(position);
        } else if (color === "green") {
        }
      });

      return coloredCells;
    }

    function colorearYguardar() {
      colorearConPatronAleatorio();
      guardarCeldasColoreadasEnLocalStorage();
    }

    const prevButton = document.getElementById("prevButton");
    const nextButton = document.getElementById("nextButton");

    nextButton.addEventListener("click", function () {
      const celdasColoreadas = JSON.parse(
        localStorage.getItem("storedColoredCells")
      );

      colorearConPatronAleatorio();

      console.log(colorearConPatronAleatorio());

      // if (!celdasColoreadas) {
      //   guardarCeldasColoreadasEnLocalStorage();
      // } else {
      //   colorearConPatronAleatorio();
      //   guardarCeldasColoreadasEnLocalStorage();
      // }
    });

    function aleatoryNumbersGroup({ groups, length, groupSizes }) {
      const numbers = [];
      const result = [];

      // Generar una secuencia de números únicos
      for (let i = 1; i <= length; i++) {
        numbers.push(i);
      }

      // Función para obtener un número aleatorio y eliminarlo del arreglo
      function getRandomUniqueNumber() {
        const index = Math.floor(Math.random() * numbers.length);
        return numbers.splice(index, 1)[0];
      }

      // Generar los grupos
      groupSizes.forEach((groupSize) => {
        const group = [];
        for (let j = 0; j < groupSize; j++) {
          group.push(getRandomUniqueNumber());
        }
        result.push(group);
      });

      return result;
    }

    // Ejemplo de uso
    const groups = 3;
    const length = 25;
    const groupSizes = [8, 9, 1]; // Cantidad de elementos en cada grupo
    const randomGroups = aleatoryNumbersGroup({ groups, length, groupSizes });
    console.log(randomGroups);
  </script>
</html>
