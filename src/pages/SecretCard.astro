---

---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Astro</title>
  </head>
  <style>
    .grid {
      width: 60vw;
      margin: auto;
      aspect-ratio: 1 / 1;
      display: grid;
      grid-template-columns: repeat(5, 1fr);
      grid-template-rows: repeat(5, 1fr);
      grid-template-areas: "1 2 3 4 5" "6 7 8 9 10" "11 12 13 14 15" "16 17 18 19 20" "21 22 23 24 25";
    }

    .grid-item {
      background-color: #b1b1b1;
      border: 1px solid #ccc;
      padding: 10px;
      font-size: 30px;
      text-align: center;
    }
  </style>
  <body>
    <div class="grid" id="grid-container">
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
      <div class="grid-item"></div>
    </div>
    <button id="prevButton">Patrón Anterior</button>
    <button id="nextButton">Siguiente Patrón</button>
  </body>
  <script>
    // Ejemplo de uso
    const length = 25;
    const groupSizes = [8, 1, 9];

    // Variable para almacenar el índice actual
    let currentIndex = 0;

    const getStoredColoredCells = () =>
      JSON.parse(localStorage.getItem("storedColoredCells") as string);

    const storedColoredCells = getStoredColoredCells();

    const nextButton = document.getElementById(
      "nextButton"
    ) as HTMLButtonElement;
    const prevButton = document.getElementById(
      "prevButton"
    ) as HTMLButtonElement;
    const gridItems = document.querySelectorAll(
      ".grid-item"
    ) as NodeListOf<HTMLDivElement>;

    function aleatoryNumbersGroup({ length, groupSizes }: { length: number; groupSizes: number[][] }) {
      const numbers: number[] = [];
      const result: number[] = [];

      // Generar una secuencia de números únicos
      for (let i = 1; i <= length; i++) {
        numbers.push(i);
      }

      // Función para obtener un número aleatorio y eliminarlo del arreglo
      function getRandomUniqueNumber() {
        const index = Math.floor(Math.random() * numbers.length);
        return numbers.splice(index, 1)[0];
      }

      // Generar los grupos
      groupSizes.forEach((groupSize) => {
        const group = [];
        for (let j = 0; j < groupSize; j++) {
          group.push(getRandomUniqueNumber());
        }
        result.push(group);
      });

      return result;
    }

    function applyGroupToGrid(group: [], color: string) {
      group.forEach((number) => {
        gridItems[number - 1].style.backgroundColor = color;
      });
    }

    function applyGroupsToGrid(randomGroups : []) {
      randomGroups.forEach((group, index) => {
        applyGroupToGrid(
          group,
          `hsl(${(index * 360) / randomGroups.length}, 100%, 50%)`
        );
      });
    }

    function clearGrid() {
      gridItems.forEach((item) => {
        item.style.backgroundColor = "#b1b1b1";
      });
    }

    function savePattern(pattern: []) {
      // Obtener el array existente de celdas coloreadas del localStorage
      const storedColoredCells = getStoredColoredCells() || [];

      // Agregar el nuevo objeto de celdas coloreadas al array
      storedColoredCells.push(pattern);

      // Guardar el array actualizado en localStorage
      localStorage.setItem(
        "storedColoredCells",
        JSON.stringify(storedColoredCells)
      );
    }

    function nextElement() {
      if (currentIndex < storedColoredCells.length) {
        currentIndex++;
        return storedColoredCells[currentIndex - 1];
      }
    }

    function prevElement() {
      if (currentIndex > 0) {
        currentIndex--;
        return storedColoredCells[currentIndex - 1];
      }
      if (currentIndex === 0) {
        currentIndex = 0;
        return storedColoredCells[currentIndex - 1];
      }
    }

    nextButton.addEventListener("click", () => {
      const store = getStoredColoredCells();
      clearGrid();
      if (currentIndex === store?.length || !store?.length) {
        currentIndex++;
        const newGroup = aleatoryNumbersGroup({ length, groupSizes });
        savePattern(newGroup);
        applyGroupsToGrid(newGroup);
      } else {
        const newGroup = nextElement();
        applyGroupsToGrid(newGroup);
      }
    });

    prevButton.addEventListener("click", () => {
      clearGrid();
      const newGroup = prevElement();
      applyGroupsToGrid(newGroup);
    });
  </script>
</html>
